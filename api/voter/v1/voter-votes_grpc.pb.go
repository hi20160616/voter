// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.3
// source: api/voter/v1/voter-votes.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VotesAPIClient is the client API for VotesAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VotesAPIClient interface {
	ListVotes(ctx context.Context, in *ListVotesRequest, opts ...grpc.CallOption) (*ListVotesResponse, error)
	GetVote(ctx context.Context, in *GetVoteRequest, opts ...grpc.CallOption) (*Vote, error)
	SearchVotes(ctx context.Context, in *SearchVotesRequest, opts ...grpc.CallOption) (*SearchVotesResponse, error)
	CreateVote(ctx context.Context, in *CreateVoteRequest, opts ...grpc.CallOption) (*Vote, error)
	UpdateVote(ctx context.Context, in *UpdateVoteRequest, opts ...grpc.CallOption) (*Vote, error)
	DeleteVote(ctx context.Context, in *DeleteVoteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type votesAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewVotesAPIClient(cc grpc.ClientConnInterface) VotesAPIClient {
	return &votesAPIClient{cc}
}

func (c *votesAPIClient) ListVotes(ctx context.Context, in *ListVotesRequest, opts ...grpc.CallOption) (*ListVotesResponse, error) {
	out := new(ListVotesResponse)
	err := c.cc.Invoke(ctx, "/voter.votes.v1.VotesAPI/ListVotes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votesAPIClient) GetVote(ctx context.Context, in *GetVoteRequest, opts ...grpc.CallOption) (*Vote, error) {
	out := new(Vote)
	err := c.cc.Invoke(ctx, "/voter.votes.v1.VotesAPI/GetVote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votesAPIClient) SearchVotes(ctx context.Context, in *SearchVotesRequest, opts ...grpc.CallOption) (*SearchVotesResponse, error) {
	out := new(SearchVotesResponse)
	err := c.cc.Invoke(ctx, "/voter.votes.v1.VotesAPI/SearchVotes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votesAPIClient) CreateVote(ctx context.Context, in *CreateVoteRequest, opts ...grpc.CallOption) (*Vote, error) {
	out := new(Vote)
	err := c.cc.Invoke(ctx, "/voter.votes.v1.VotesAPI/CreateVote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votesAPIClient) UpdateVote(ctx context.Context, in *UpdateVoteRequest, opts ...grpc.CallOption) (*Vote, error) {
	out := new(Vote)
	err := c.cc.Invoke(ctx, "/voter.votes.v1.VotesAPI/UpdateVote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votesAPIClient) DeleteVote(ctx context.Context, in *DeleteVoteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/voter.votes.v1.VotesAPI/DeleteVote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VotesAPIServer is the server API for VotesAPI service.
// All implementations must embed UnimplementedVotesAPIServer
// for forward compatibility
type VotesAPIServer interface {
	ListVotes(context.Context, *ListVotesRequest) (*ListVotesResponse, error)
	GetVote(context.Context, *GetVoteRequest) (*Vote, error)
	SearchVotes(context.Context, *SearchVotesRequest) (*SearchVotesResponse, error)
	CreateVote(context.Context, *CreateVoteRequest) (*Vote, error)
	UpdateVote(context.Context, *UpdateVoteRequest) (*Vote, error)
	DeleteVote(context.Context, *DeleteVoteRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedVotesAPIServer()
}

// UnimplementedVotesAPIServer must be embedded to have forward compatible implementations.
type UnimplementedVotesAPIServer struct {
}

func (UnimplementedVotesAPIServer) ListVotes(context.Context, *ListVotesRequest) (*ListVotesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVotes not implemented")
}
func (UnimplementedVotesAPIServer) GetVote(context.Context, *GetVoteRequest) (*Vote, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVote not implemented")
}
func (UnimplementedVotesAPIServer) SearchVotes(context.Context, *SearchVotesRequest) (*SearchVotesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchVotes not implemented")
}
func (UnimplementedVotesAPIServer) CreateVote(context.Context, *CreateVoteRequest) (*Vote, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVote not implemented")
}
func (UnimplementedVotesAPIServer) UpdateVote(context.Context, *UpdateVoteRequest) (*Vote, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVote not implemented")
}
func (UnimplementedVotesAPIServer) DeleteVote(context.Context, *DeleteVoteRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVote not implemented")
}
func (UnimplementedVotesAPIServer) mustEmbedUnimplementedVotesAPIServer() {}

// UnsafeVotesAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VotesAPIServer will
// result in compilation errors.
type UnsafeVotesAPIServer interface {
	mustEmbedUnimplementedVotesAPIServer()
}

func RegisterVotesAPIServer(s grpc.ServiceRegistrar, srv VotesAPIServer) {
	s.RegisterService(&VotesAPI_ServiceDesc, srv)
}

func _VotesAPI_ListVotes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVotesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotesAPIServer).ListVotes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/voter.votes.v1.VotesAPI/ListVotes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotesAPIServer).ListVotes(ctx, req.(*ListVotesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotesAPI_GetVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotesAPIServer).GetVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/voter.votes.v1.VotesAPI/GetVote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotesAPIServer).GetVote(ctx, req.(*GetVoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotesAPI_SearchVotes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchVotesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotesAPIServer).SearchVotes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/voter.votes.v1.VotesAPI/SearchVotes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotesAPIServer).SearchVotes(ctx, req.(*SearchVotesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotesAPI_CreateVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotesAPIServer).CreateVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/voter.votes.v1.VotesAPI/CreateVote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotesAPIServer).CreateVote(ctx, req.(*CreateVoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotesAPI_UpdateVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotesAPIServer).UpdateVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/voter.votes.v1.VotesAPI/UpdateVote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotesAPIServer).UpdateVote(ctx, req.(*UpdateVoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotesAPI_DeleteVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotesAPIServer).DeleteVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/voter.votes.v1.VotesAPI/DeleteVote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotesAPIServer).DeleteVote(ctx, req.(*DeleteVoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VotesAPI_ServiceDesc is the grpc.ServiceDesc for VotesAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VotesAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "voter.votes.v1.VotesAPI",
	HandlerType: (*VotesAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListVotes",
			Handler:    _VotesAPI_ListVotes_Handler,
		},
		{
			MethodName: "GetVote",
			Handler:    _VotesAPI_GetVote_Handler,
		},
		{
			MethodName: "SearchVotes",
			Handler:    _VotesAPI_SearchVotes_Handler,
		},
		{
			MethodName: "CreateVote",
			Handler:    _VotesAPI_CreateVote_Handler,
		},
		{
			MethodName: "UpdateVote",
			Handler:    _VotesAPI_UpdateVote_Handler,
		},
		{
			MethodName: "DeleteVote",
			Handler:    _VotesAPI_DeleteVote_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/voter/v1/voter-votes.proto",
}
