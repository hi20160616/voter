// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.12.4
// source: api/voter/v1/voter-ip_votes.proto

package v1

import (
	empty "github.com/golang/protobuf/ptypes/empty"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ListIpVotesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The parent resource name
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// The maximum number of items to return.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// The next_page_token value returned from a previous List request, if any.
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListIpVotesRequest) Reset() {
	*x = ListIpVotesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_voter_v1_voter_ip_votes_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListIpVotesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListIpVotesRequest) ProtoMessage() {}

func (x *ListIpVotesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_voter_v1_voter_ip_votes_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListIpVotesRequest.ProtoReflect.Descriptor instead.
func (*ListIpVotesRequest) Descriptor() ([]byte, []int) {
	return file_api_voter_v1_voter_ip_votes_proto_rawDescGZIP(), []int{0}
}

func (x *ListIpVotesRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ListIpVotesRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListIpVotesRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListIpVotesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IpVotes       []*IpVote `protobuf:"bytes,1,rep,name=ipVotes,proto3" json:"ipVotes,omitempty"`
	NextPageToken string    `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListIpVotesResponse) Reset() {
	*x = ListIpVotesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_voter_v1_voter_ip_votes_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListIpVotesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListIpVotesResponse) ProtoMessage() {}

func (x *ListIpVotesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_voter_v1_voter_ip_votes_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListIpVotesResponse.ProtoReflect.Descriptor instead.
func (*ListIpVotesResponse) Descriptor() ([]byte, []int) {
	return file_api_voter_v1_voter_ip_votes_proto_rawDescGZIP(), []int{1}
}

func (x *ListIpVotesResponse) GetIpVotes() []*IpVote {
	if x != nil {
		return x.IpVotes
	}
	return nil
}

func (x *ListIpVotesResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type GetIpVoteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetIpVoteRequest) Reset() {
	*x = GetIpVoteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_voter_v1_voter_ip_votes_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetIpVoteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIpVoteRequest) ProtoMessage() {}

func (x *GetIpVoteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_voter_v1_voter_ip_votes_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIpVoteRequest.ProtoReflect.Descriptor instead.
func (*GetIpVoteRequest) Descriptor() ([]byte, []int) {
	return file_api_voter_v1_voter_ip_votes_proto_rawDescGZIP(), []int{2}
}

func (x *GetIpVoteRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type CreateIpVoteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parent   string  `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	IpVoteId int32   `protobuf:"varint,2,opt,name=ip_vote_id,json=ipVoteId,proto3" json:"ip_vote_id,omitempty"`
	IpVote   *IpVote `protobuf:"bytes,3,opt,name=ip_vote,json=ipVote,proto3" json:"ip_vote,omitempty"`
}

func (x *CreateIpVoteRequest) Reset() {
	*x = CreateIpVoteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_voter_v1_voter_ip_votes_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateIpVoteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateIpVoteRequest) ProtoMessage() {}

func (x *CreateIpVoteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_voter_v1_voter_ip_votes_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateIpVoteRequest.ProtoReflect.Descriptor instead.
func (*CreateIpVoteRequest) Descriptor() ([]byte, []int) {
	return file_api_voter_v1_voter_ip_votes_proto_rawDescGZIP(), []int{3}
}

func (x *CreateIpVoteRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *CreateIpVoteRequest) GetIpVoteId() int32 {
	if x != nil {
		return x.IpVoteId
	}
	return 0
}

func (x *CreateIpVoteRequest) GetIpVote() *IpVote {
	if x != nil {
		return x.IpVote
	}
	return nil
}

type UpdateIpVoteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IpVote *IpVote `protobuf:"bytes,1,opt,name=ip_vote,json=ipVote,proto3" json:"ip_vote,omitempty"`
	// The update mask applies to the resource. For the `FieldMask` definition,
	// see https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask
	UpdateMask *field_mask.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
}

func (x *UpdateIpVoteRequest) Reset() {
	*x = UpdateIpVoteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_voter_v1_voter_ip_votes_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateIpVoteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateIpVoteRequest) ProtoMessage() {}

func (x *UpdateIpVoteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_voter_v1_voter_ip_votes_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateIpVoteRequest.ProtoReflect.Descriptor instead.
func (*UpdateIpVoteRequest) Descriptor() ([]byte, []int) {
	return file_api_voter_v1_voter_ip_votes_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateIpVoteRequest) GetIpVote() *IpVote {
	if x != nil {
		return x.IpVote
	}
	return nil
}

func (x *UpdateIpVoteRequest) GetUpdateMask() *field_mask.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

type DeleteIpVoteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteIpVoteRequest) Reset() {
	*x = DeleteIpVoteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_voter_v1_voter_ip_votes_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteIpVoteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteIpVoteRequest) ProtoMessage() {}

func (x *DeleteIpVoteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_voter_v1_voter_ip_votes_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteIpVoteRequest.ProtoReflect.Descriptor instead.
func (*DeleteIpVoteRequest) Descriptor() ([]byte, []int) {
	return file_api_voter_v1_voter_ip_votes_proto_rawDescGZIP(), []int{5}
}

func (x *DeleteIpVoteRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type IpVote struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	IpVoteId int32  `protobuf:"varint,2,opt,name=ip_vote_id,json=ipVoteId,proto3" json:"ip_vote_id,omitempty"`
	Ip       string `protobuf:"bytes,3,opt,name=ip,proto3" json:"ip,omitempty"`
	VoteId   int32  `protobuf:"varint,4,opt,name=vote_id,json=voteId,proto3" json:"vote_id,omitempty"`
	Opts     string `protobuf:"bytes,5,opt,name=opts,proto3" json:"opts,omitempty"`
	TxtField string `protobuf:"bytes,6,opt,name=txtField,proto3" json:"txtField,omitempty"`
	PostId   int32  `protobuf:"varint,7,opt,name=post_id,json=postId,proto3" json:"post_id,omitempty"`
}

func (x *IpVote) Reset() {
	*x = IpVote{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_voter_v1_voter_ip_votes_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IpVote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IpVote) ProtoMessage() {}

func (x *IpVote) ProtoReflect() protoreflect.Message {
	mi := &file_api_voter_v1_voter_ip_votes_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IpVote.ProtoReflect.Descriptor instead.
func (*IpVote) Descriptor() ([]byte, []int) {
	return file_api_voter_v1_voter_ip_votes_proto_rawDescGZIP(), []int{6}
}

func (x *IpVote) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *IpVote) GetIpVoteId() int32 {
	if x != nil {
		return x.IpVoteId
	}
	return 0
}

func (x *IpVote) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *IpVote) GetVoteId() int32 {
	if x != nil {
		return x.VoteId
	}
	return 0
}

func (x *IpVote) GetOpts() string {
	if x != nil {
		return x.Opts
	}
	return ""
}

func (x *IpVote) GetTxtField() string {
	if x != nil {
		return x.TxtField
	}
	return ""
}

func (x *IpVote) GetPostId() int32 {
	if x != nil {
		return x.PostId
	}
	return 0
}

type IpVotes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IpVotes []*IpVote `protobuf:"bytes,1,rep,name=ip_votes,json=ipVotes,proto3" json:"ip_votes,omitempty"`
}

func (x *IpVotes) Reset() {
	*x = IpVotes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_voter_v1_voter_ip_votes_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IpVotes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IpVotes) ProtoMessage() {}

func (x *IpVotes) ProtoReflect() protoreflect.Message {
	mi := &file_api_voter_v1_voter_ip_votes_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IpVotes.ProtoReflect.Descriptor instead.
func (*IpVotes) Descriptor() ([]byte, []int) {
	return file_api_voter_v1_voter_ip_votes_proto_rawDescGZIP(), []int{7}
}

func (x *IpVotes) GetIpVotes() []*IpVote {
	if x != nil {
		return x.IpVotes
	}
	return nil
}

var File_api_voter_v1_voter_ip_votes_proto protoreflect.FileDescriptor

var file_api_voter_v1_voter_ip_votes_proto_rawDesc = []byte{
	0x0a, 0x21, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x6f, 0x74, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x76,
	0x6f, 0x74, 0x65, 0x72, 0x2d, 0x69, 0x70, 0x5f, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x11, 0x76, 0x6f, 0x74, 0x65, 0x72, 0x2e, 0x69, 0x70, 0x5f, 0x76, 0x6f,
	0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x68, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x70, 0x56, 0x6f, 0x74,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x72, 0x0a,
	0x13, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x70, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x69, 0x70, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x76, 0x6f, 0x74, 0x65, 0x72, 0x2e, 0x69, 0x70,
	0x5f, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x70, 0x56, 0x6f, 0x74, 0x65,
	0x52, 0x07, 0x69, 0x70, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78,
	0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x22, 0x26, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x49, 0x70, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x7f, 0x0a, 0x13, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x49, 0x70, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x0a, 0x69, 0x70, 0x5f, 0x76,
	0x6f, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x69, 0x70,
	0x56, 0x6f, 0x74, 0x65, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x07, 0x69, 0x70, 0x5f, 0x76, 0x6f, 0x74,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x76, 0x6f, 0x74, 0x65, 0x72, 0x2e,
	0x69, 0x70, 0x5f, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x70, 0x56, 0x6f,
	0x74, 0x65, 0x52, 0x06, 0x69, 0x70, 0x56, 0x6f, 0x74, 0x65, 0x22, 0x86, 0x01, 0x0a, 0x13, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x70, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x32, 0x0a, 0x07, 0x69, 0x70, 0x5f, 0x76, 0x6f, 0x74, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x76, 0x6f, 0x74, 0x65, 0x72, 0x2e, 0x69, 0x70, 0x5f, 0x76,
	0x6f, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x70, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x06,
	0x69, 0x70, 0x56, 0x6f, 0x74, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d,
	0x61, 0x73, 0x6b, 0x22, 0x29, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x70, 0x56,
	0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xac,
	0x01, 0x0a, 0x06, 0x49, 0x70, 0x56, 0x6f, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a,
	0x0a, 0x69, 0x70, 0x5f, 0x76, 0x6f, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x69, 0x70, 0x56, 0x6f, 0x74, 0x65, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x17, 0x0a, 0x07, 0x76,
	0x6f, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x76, 0x6f,
	0x74, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6f, 0x70, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6f, 0x70, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x78, 0x74, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x78, 0x74, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x22, 0x3f, 0x0a,
	0x07, 0x49, 0x70, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x08, 0x69, 0x70, 0x5f, 0x76,
	0x6f, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x76, 0x6f, 0x74,
	0x65, 0x72, 0x2e, 0x69, 0x70, 0x5f, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x70, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x07, 0x69, 0x70, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x32, 0xf2,
	0x05, 0x0a, 0x0a, 0x49, 0x70, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x41, 0x50, 0x49, 0x12, 0xf1, 0x01,
	0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x70, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x25, 0x2e,
	0x76, 0x6f, 0x74, 0x65, 0x72, 0x2e, 0x69, 0x70, 0x5f, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x70, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x76, 0x6f, 0x74, 0x65, 0x72, 0x2e, 0x69, 0x70, 0x5f,
	0x76, 0x6f, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x70, 0x56,
	0x6f, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x92, 0x01, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x8b, 0x01, 0x12, 0x16, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x3d, 0x69, 0x70, 0x73, 0x5f, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x7d, 0x5a, 0x21,
	0x12, 0x1f, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x76, 0x6f,
	0x74, 0x65, 0x5f, 0x69, 0x64, 0x2f, 0x2a, 0x7d, 0x2f, 0x69, 0x70, 0x5f, 0x76, 0x6f, 0x74, 0x65,
	0x73, 0x5a, 0x21, 0x12, 0x1f, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x3d, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x2f, 0x2a, 0x7d, 0x2f, 0x69, 0x70, 0x5f, 0x76,
	0x6f, 0x74, 0x65, 0x73, 0x5a, 0x2b, 0x12, 0x29, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x3d, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x2f, 0x2a, 0x2f, 0x76, 0x6f,
	0x74, 0x65, 0x5f, 0x69, 0x64, 0x2f, 0x2a, 0x7d, 0x2f, 0x69, 0x70, 0x5f, 0x76, 0x6f, 0x74, 0x65,
	0x73, 0x12, 0x6a, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x49, 0x70, 0x56, 0x6f, 0x74, 0x65, 0x12, 0x23,
	0x2e, 0x76, 0x6f, 0x74, 0x65, 0x72, 0x2e, 0x69, 0x70, 0x5f, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x70, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x76, 0x6f, 0x74, 0x65, 0x72, 0x2e, 0x69, 0x70, 0x5f, 0x76,
	0x6f, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x70, 0x56, 0x6f, 0x74, 0x65, 0x22, 0x1d,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x12, 0x15, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d,
	0x65, 0x3d, 0x69, 0x70, 0x5f, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x12, 0x82, 0x01,
	0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x70, 0x56, 0x6f, 0x74, 0x65, 0x12, 0x26,
	0x2e, 0x76, 0x6f, 0x74, 0x65, 0x72, 0x2e, 0x69, 0x70, 0x5f, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x70, 0x56, 0x6f, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x76, 0x6f, 0x74, 0x65, 0x72, 0x2e, 0x69,
	0x70, 0x5f, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x70, 0x56, 0x6f, 0x74,
	0x65, 0x22, 0x2f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x22, 0x1e, 0x2f, 0x76, 0x31, 0x2f, 0x7b,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x69, 0x70, 0x5f, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x2f,
	0x2a, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x7d, 0x3a, 0x07, 0x69, 0x70, 0x5f, 0x76, 0x6f,
	0x74, 0x65, 0x12, 0x88, 0x01, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x70, 0x56,
	0x6f, 0x74, 0x65, 0x12, 0x26, 0x2e, 0x76, 0x6f, 0x74, 0x65, 0x72, 0x2e, 0x69, 0x70, 0x5f, 0x76,
	0x6f, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x70,
	0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x76, 0x6f,
	0x74, 0x65, 0x72, 0x2e, 0x69, 0x70, 0x5f, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x70, 0x56, 0x6f, 0x74, 0x65, 0x22, 0x35, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x32, 0x24,
	0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x69, 0x70, 0x5f, 0x76, 0x6f, 0x74, 0x65, 0x2e, 0x6e, 0x61, 0x6d,
	0x65, 0x3d, 0x69, 0x70, 0x5f, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x2f, 0x2a, 0x2f, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x7d, 0x3a, 0x07, 0x69, 0x70, 0x5f, 0x76, 0x6f, 0x74, 0x65, 0x12, 0x74, 0x0a,
	0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x70, 0x56, 0x6f, 0x74, 0x65, 0x12, 0x26, 0x2e,
	0x76, 0x6f, 0x74, 0x65, 0x72, 0x2e, 0x69, 0x70, 0x5f, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x70, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x24, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x2a, 0x1c, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65,
	0x3d, 0x69, 0x70, 0x5f, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x2f, 0x2a, 0x2f, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x7d, 0x42, 0x2d, 0x5a, 0x2b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x68, 0x69, 0x32, 0x30, 0x31, 0x36, 0x30, 0x36, 0x31, 0x36, 0x2f, 0x76, 0x6f, 0x74,
	0x65, 0x72, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x6f, 0x74, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x3b,
	0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_voter_v1_voter_ip_votes_proto_rawDescOnce sync.Once
	file_api_voter_v1_voter_ip_votes_proto_rawDescData = file_api_voter_v1_voter_ip_votes_proto_rawDesc
)

func file_api_voter_v1_voter_ip_votes_proto_rawDescGZIP() []byte {
	file_api_voter_v1_voter_ip_votes_proto_rawDescOnce.Do(func() {
		file_api_voter_v1_voter_ip_votes_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_voter_v1_voter_ip_votes_proto_rawDescData)
	})
	return file_api_voter_v1_voter_ip_votes_proto_rawDescData
}

var file_api_voter_v1_voter_ip_votes_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_api_voter_v1_voter_ip_votes_proto_goTypes = []interface{}{
	(*ListIpVotesRequest)(nil),   // 0: voter.ip_votes.v1.ListIpVotesRequest
	(*ListIpVotesResponse)(nil),  // 1: voter.ip_votes.v1.ListIpVotesResponse
	(*GetIpVoteRequest)(nil),     // 2: voter.ip_votes.v1.GetIpVoteRequest
	(*CreateIpVoteRequest)(nil),  // 3: voter.ip_votes.v1.CreateIpVoteRequest
	(*UpdateIpVoteRequest)(nil),  // 4: voter.ip_votes.v1.UpdateIpVoteRequest
	(*DeleteIpVoteRequest)(nil),  // 5: voter.ip_votes.v1.DeleteIpVoteRequest
	(*IpVote)(nil),               // 6: voter.ip_votes.v1.IpVote
	(*IpVotes)(nil),              // 7: voter.ip_votes.v1.IpVotes
	(*field_mask.FieldMask)(nil), // 8: google.protobuf.FieldMask
	(*empty.Empty)(nil),          // 9: google.protobuf.Empty
}
var file_api_voter_v1_voter_ip_votes_proto_depIdxs = []int32{
	6,  // 0: voter.ip_votes.v1.ListIpVotesResponse.ipVotes:type_name -> voter.ip_votes.v1.IpVote
	6,  // 1: voter.ip_votes.v1.CreateIpVoteRequest.ip_vote:type_name -> voter.ip_votes.v1.IpVote
	6,  // 2: voter.ip_votes.v1.UpdateIpVoteRequest.ip_vote:type_name -> voter.ip_votes.v1.IpVote
	8,  // 3: voter.ip_votes.v1.UpdateIpVoteRequest.update_mask:type_name -> google.protobuf.FieldMask
	6,  // 4: voter.ip_votes.v1.IpVotes.ip_votes:type_name -> voter.ip_votes.v1.IpVote
	0,  // 5: voter.ip_votes.v1.IpVotesAPI.ListIpVotes:input_type -> voter.ip_votes.v1.ListIpVotesRequest
	2,  // 6: voter.ip_votes.v1.IpVotesAPI.GetIpVote:input_type -> voter.ip_votes.v1.GetIpVoteRequest
	3,  // 7: voter.ip_votes.v1.IpVotesAPI.CreateIpVote:input_type -> voter.ip_votes.v1.CreateIpVoteRequest
	4,  // 8: voter.ip_votes.v1.IpVotesAPI.UpdateIpVote:input_type -> voter.ip_votes.v1.UpdateIpVoteRequest
	5,  // 9: voter.ip_votes.v1.IpVotesAPI.DeleteIpVote:input_type -> voter.ip_votes.v1.DeleteIpVoteRequest
	1,  // 10: voter.ip_votes.v1.IpVotesAPI.ListIpVotes:output_type -> voter.ip_votes.v1.ListIpVotesResponse
	6,  // 11: voter.ip_votes.v1.IpVotesAPI.GetIpVote:output_type -> voter.ip_votes.v1.IpVote
	6,  // 12: voter.ip_votes.v1.IpVotesAPI.CreateIpVote:output_type -> voter.ip_votes.v1.IpVote
	6,  // 13: voter.ip_votes.v1.IpVotesAPI.UpdateIpVote:output_type -> voter.ip_votes.v1.IpVote
	9,  // 14: voter.ip_votes.v1.IpVotesAPI.DeleteIpVote:output_type -> google.protobuf.Empty
	10, // [10:15] is the sub-list for method output_type
	5,  // [5:10] is the sub-list for method input_type
	5,  // [5:5] is the sub-list for extension type_name
	5,  // [5:5] is the sub-list for extension extendee
	0,  // [0:5] is the sub-list for field type_name
}

func init() { file_api_voter_v1_voter_ip_votes_proto_init() }
func file_api_voter_v1_voter_ip_votes_proto_init() {
	if File_api_voter_v1_voter_ip_votes_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_voter_v1_voter_ip_votes_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListIpVotesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_voter_v1_voter_ip_votes_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListIpVotesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_voter_v1_voter_ip_votes_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetIpVoteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_voter_v1_voter_ip_votes_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateIpVoteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_voter_v1_voter_ip_votes_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateIpVoteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_voter_v1_voter_ip_votes_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteIpVoteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_voter_v1_voter_ip_votes_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IpVote); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_voter_v1_voter_ip_votes_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IpVotes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_voter_v1_voter_ip_votes_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_voter_v1_voter_ip_votes_proto_goTypes,
		DependencyIndexes: file_api_voter_v1_voter_ip_votes_proto_depIdxs,
		MessageInfos:      file_api_voter_v1_voter_ip_votes_proto_msgTypes,
	}.Build()
	File_api_voter_v1_voter_ip_votes_proto = out.File
	file_api_voter_v1_voter_ip_votes_proto_rawDesc = nil
	file_api_voter_v1_voter_ip_votes_proto_goTypes = nil
	file_api_voter_v1_voter_ip_votes_proto_depIdxs = nil
}
