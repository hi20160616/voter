// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.3
// source: api/voter/v1/voter-ip_votes.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// IpVotesAPIClient is the client API for IpVotesAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IpVotesAPIClient interface {
	ListIpVotes(ctx context.Context, in *ListIpVotesRequest, opts ...grpc.CallOption) (*ListIpVotesResponse, error)
	GetIpVote(ctx context.Context, in *GetIpVoteRequest, opts ...grpc.CallOption) (*IpVote, error)
	CreateIpVote(ctx context.Context, in *CreateIpVoteRequest, opts ...grpc.CallOption) (*IpVote, error)
	UpdateIpVote(ctx context.Context, in *UpdateIpVoteRequest, opts ...grpc.CallOption) (*IpVote, error)
	DeleteIpVote(ctx context.Context, in *DeleteIpVoteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type ipVotesAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewIpVotesAPIClient(cc grpc.ClientConnInterface) IpVotesAPIClient {
	return &ipVotesAPIClient{cc}
}

func (c *ipVotesAPIClient) ListIpVotes(ctx context.Context, in *ListIpVotesRequest, opts ...grpc.CallOption) (*ListIpVotesResponse, error) {
	out := new(ListIpVotesResponse)
	err := c.cc.Invoke(ctx, "/voter.ip_votes.v1.IpVotesAPI/ListIpVotes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ipVotesAPIClient) GetIpVote(ctx context.Context, in *GetIpVoteRequest, opts ...grpc.CallOption) (*IpVote, error) {
	out := new(IpVote)
	err := c.cc.Invoke(ctx, "/voter.ip_votes.v1.IpVotesAPI/GetIpVote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ipVotesAPIClient) CreateIpVote(ctx context.Context, in *CreateIpVoteRequest, opts ...grpc.CallOption) (*IpVote, error) {
	out := new(IpVote)
	err := c.cc.Invoke(ctx, "/voter.ip_votes.v1.IpVotesAPI/CreateIpVote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ipVotesAPIClient) UpdateIpVote(ctx context.Context, in *UpdateIpVoteRequest, opts ...grpc.CallOption) (*IpVote, error) {
	out := new(IpVote)
	err := c.cc.Invoke(ctx, "/voter.ip_votes.v1.IpVotesAPI/UpdateIpVote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ipVotesAPIClient) DeleteIpVote(ctx context.Context, in *DeleteIpVoteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/voter.ip_votes.v1.IpVotesAPI/DeleteIpVote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IpVotesAPIServer is the server API for IpVotesAPI service.
// All implementations must embed UnimplementedIpVotesAPIServer
// for forward compatibility
type IpVotesAPIServer interface {
	ListIpVotes(context.Context, *ListIpVotesRequest) (*ListIpVotesResponse, error)
	GetIpVote(context.Context, *GetIpVoteRequest) (*IpVote, error)
	CreateIpVote(context.Context, *CreateIpVoteRequest) (*IpVote, error)
	UpdateIpVote(context.Context, *UpdateIpVoteRequest) (*IpVote, error)
	DeleteIpVote(context.Context, *DeleteIpVoteRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedIpVotesAPIServer()
}

// UnimplementedIpVotesAPIServer must be embedded to have forward compatible implementations.
type UnimplementedIpVotesAPIServer struct {
}

func (UnimplementedIpVotesAPIServer) ListIpVotes(context.Context, *ListIpVotesRequest) (*ListIpVotesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListIpVotes not implemented")
}
func (UnimplementedIpVotesAPIServer) GetIpVote(context.Context, *GetIpVoteRequest) (*IpVote, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIpVote not implemented")
}
func (UnimplementedIpVotesAPIServer) CreateIpVote(context.Context, *CreateIpVoteRequest) (*IpVote, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIpVote not implemented")
}
func (UnimplementedIpVotesAPIServer) UpdateIpVote(context.Context, *UpdateIpVoteRequest) (*IpVote, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateIpVote not implemented")
}
func (UnimplementedIpVotesAPIServer) DeleteIpVote(context.Context, *DeleteIpVoteRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteIpVote not implemented")
}
func (UnimplementedIpVotesAPIServer) mustEmbedUnimplementedIpVotesAPIServer() {}

// UnsafeIpVotesAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IpVotesAPIServer will
// result in compilation errors.
type UnsafeIpVotesAPIServer interface {
	mustEmbedUnimplementedIpVotesAPIServer()
}

func RegisterIpVotesAPIServer(s grpc.ServiceRegistrar, srv IpVotesAPIServer) {
	s.RegisterService(&IpVotesAPI_ServiceDesc, srv)
}

func _IpVotesAPI_ListIpVotes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListIpVotesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpVotesAPIServer).ListIpVotes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/voter.ip_votes.v1.IpVotesAPI/ListIpVotes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpVotesAPIServer).ListIpVotes(ctx, req.(*ListIpVotesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IpVotesAPI_GetIpVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIpVoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpVotesAPIServer).GetIpVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/voter.ip_votes.v1.IpVotesAPI/GetIpVote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpVotesAPIServer).GetIpVote(ctx, req.(*GetIpVoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IpVotesAPI_CreateIpVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateIpVoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpVotesAPIServer).CreateIpVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/voter.ip_votes.v1.IpVotesAPI/CreateIpVote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpVotesAPIServer).CreateIpVote(ctx, req.(*CreateIpVoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IpVotesAPI_UpdateIpVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateIpVoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpVotesAPIServer).UpdateIpVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/voter.ip_votes.v1.IpVotesAPI/UpdateIpVote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpVotesAPIServer).UpdateIpVote(ctx, req.(*UpdateIpVoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IpVotesAPI_DeleteIpVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteIpVoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpVotesAPIServer).DeleteIpVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/voter.ip_votes.v1.IpVotesAPI/DeleteIpVote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpVotesAPIServer).DeleteIpVote(ctx, req.(*DeleteIpVoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IpVotesAPI_ServiceDesc is the grpc.ServiceDesc for IpVotesAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IpVotesAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "voter.ip_votes.v1.IpVotesAPI",
	HandlerType: (*IpVotesAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListIpVotes",
			Handler:    _IpVotesAPI_ListIpVotes_Handler,
		},
		{
			MethodName: "GetIpVote",
			Handler:    _IpVotesAPI_GetIpVote_Handler,
		},
		{
			MethodName: "CreateIpVote",
			Handler:    _IpVotesAPI_CreateIpVote_Handler,
		},
		{
			MethodName: "UpdateIpVote",
			Handler:    _IpVotesAPI_UpdateIpVote_Handler,
		},
		{
			MethodName: "DeleteIpVote",
			Handler:    _IpVotesAPI_DeleteIpVote_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/voter/v1/voter-ip_votes.proto",
}
