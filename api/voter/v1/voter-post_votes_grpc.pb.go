// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: api/voter/v1/voter-post_votes.proto

package v1

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PostVotesAPIClient is the client API for PostVotesAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PostVotesAPIClient interface {
	ListPostVotes(ctx context.Context, in *ListPostVotesRequest, opts ...grpc.CallOption) (*ListPostVotesResponse, error)
	GetByPidVid(ctx context.Context, in *GetByPidVidRequest, opts ...grpc.CallOption) (*PostVote, error)
	GetPostVote(ctx context.Context, in *GetPostVoteRequest, opts ...grpc.CallOption) (*PostVote, error)
	ListVidsByPid(ctx context.Context, in *ListVidsByPidRequest, opts ...grpc.CallOption) (*ListVidsByPidResponse, error)
	CreatePostVote(ctx context.Context, in *CreatePostVoteRequest, opts ...grpc.CallOption) (*PostVote, error)
	UpdatePostVote(ctx context.Context, in *UpdatePostVoteRequest, opts ...grpc.CallOption) (*PostVote, error)
	DeletePostVote(ctx context.Context, in *DeletePostVoteRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type postVotesAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewPostVotesAPIClient(cc grpc.ClientConnInterface) PostVotesAPIClient {
	return &postVotesAPIClient{cc}
}

func (c *postVotesAPIClient) ListPostVotes(ctx context.Context, in *ListPostVotesRequest, opts ...grpc.CallOption) (*ListPostVotesResponse, error) {
	out := new(ListPostVotesResponse)
	err := c.cc.Invoke(ctx, "/voter.post_votes.v1.PostVotesAPI/ListPostVotes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postVotesAPIClient) GetByPidVid(ctx context.Context, in *GetByPidVidRequest, opts ...grpc.CallOption) (*PostVote, error) {
	out := new(PostVote)
	err := c.cc.Invoke(ctx, "/voter.post_votes.v1.PostVotesAPI/GetByPidVid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postVotesAPIClient) GetPostVote(ctx context.Context, in *GetPostVoteRequest, opts ...grpc.CallOption) (*PostVote, error) {
	out := new(PostVote)
	err := c.cc.Invoke(ctx, "/voter.post_votes.v1.PostVotesAPI/GetPostVote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postVotesAPIClient) ListVidsByPid(ctx context.Context, in *ListVidsByPidRequest, opts ...grpc.CallOption) (*ListVidsByPidResponse, error) {
	out := new(ListVidsByPidResponse)
	err := c.cc.Invoke(ctx, "/voter.post_votes.v1.PostVotesAPI/ListVidsByPid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postVotesAPIClient) CreatePostVote(ctx context.Context, in *CreatePostVoteRequest, opts ...grpc.CallOption) (*PostVote, error) {
	out := new(PostVote)
	err := c.cc.Invoke(ctx, "/voter.post_votes.v1.PostVotesAPI/CreatePostVote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postVotesAPIClient) UpdatePostVote(ctx context.Context, in *UpdatePostVoteRequest, opts ...grpc.CallOption) (*PostVote, error) {
	out := new(PostVote)
	err := c.cc.Invoke(ctx, "/voter.post_votes.v1.PostVotesAPI/UpdatePostVote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postVotesAPIClient) DeletePostVote(ctx context.Context, in *DeletePostVoteRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/voter.post_votes.v1.PostVotesAPI/DeletePostVote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PostVotesAPIServer is the server API for PostVotesAPI service.
// All implementations must embed UnimplementedPostVotesAPIServer
// for forward compatibility
type PostVotesAPIServer interface {
	ListPostVotes(context.Context, *ListPostVotesRequest) (*ListPostVotesResponse, error)
	GetByPidVid(context.Context, *GetByPidVidRequest) (*PostVote, error)
	GetPostVote(context.Context, *GetPostVoteRequest) (*PostVote, error)
	ListVidsByPid(context.Context, *ListVidsByPidRequest) (*ListVidsByPidResponse, error)
	CreatePostVote(context.Context, *CreatePostVoteRequest) (*PostVote, error)
	UpdatePostVote(context.Context, *UpdatePostVoteRequest) (*PostVote, error)
	DeletePostVote(context.Context, *DeletePostVoteRequest) (*empty.Empty, error)
	mustEmbedUnimplementedPostVotesAPIServer()
}

// UnimplementedPostVotesAPIServer must be embedded to have forward compatible implementations.
type UnimplementedPostVotesAPIServer struct {
}

func (UnimplementedPostVotesAPIServer) ListPostVotes(context.Context, *ListPostVotesRequest) (*ListPostVotesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPostVotes not implemented")
}
func (UnimplementedPostVotesAPIServer) GetByPidVid(context.Context, *GetByPidVidRequest) (*PostVote, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByPidVid not implemented")
}
func (UnimplementedPostVotesAPIServer) GetPostVote(context.Context, *GetPostVoteRequest) (*PostVote, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPostVote not implemented")
}
func (UnimplementedPostVotesAPIServer) ListVidsByPid(context.Context, *ListVidsByPidRequest) (*ListVidsByPidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVidsByPid not implemented")
}
func (UnimplementedPostVotesAPIServer) CreatePostVote(context.Context, *CreatePostVoteRequest) (*PostVote, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePostVote not implemented")
}
func (UnimplementedPostVotesAPIServer) UpdatePostVote(context.Context, *UpdatePostVoteRequest) (*PostVote, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePostVote not implemented")
}
func (UnimplementedPostVotesAPIServer) DeletePostVote(context.Context, *DeletePostVoteRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePostVote not implemented")
}
func (UnimplementedPostVotesAPIServer) mustEmbedUnimplementedPostVotesAPIServer() {}

// UnsafePostVotesAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PostVotesAPIServer will
// result in compilation errors.
type UnsafePostVotesAPIServer interface {
	mustEmbedUnimplementedPostVotesAPIServer()
}

func RegisterPostVotesAPIServer(s grpc.ServiceRegistrar, srv PostVotesAPIServer) {
	s.RegisterService(&PostVotesAPI_ServiceDesc, srv)
}

func _PostVotesAPI_ListPostVotes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPostVotesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostVotesAPIServer).ListPostVotes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/voter.post_votes.v1.PostVotesAPI/ListPostVotes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostVotesAPIServer).ListPostVotes(ctx, req.(*ListPostVotesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostVotesAPI_GetByPidVid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByPidVidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostVotesAPIServer).GetByPidVid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/voter.post_votes.v1.PostVotesAPI/GetByPidVid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostVotesAPIServer).GetByPidVid(ctx, req.(*GetByPidVidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostVotesAPI_GetPostVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPostVoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostVotesAPIServer).GetPostVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/voter.post_votes.v1.PostVotesAPI/GetPostVote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostVotesAPIServer).GetPostVote(ctx, req.(*GetPostVoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostVotesAPI_ListVidsByPid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVidsByPidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostVotesAPIServer).ListVidsByPid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/voter.post_votes.v1.PostVotesAPI/ListVidsByPid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostVotesAPIServer).ListVidsByPid(ctx, req.(*ListVidsByPidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostVotesAPI_CreatePostVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePostVoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostVotesAPIServer).CreatePostVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/voter.post_votes.v1.PostVotesAPI/CreatePostVote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostVotesAPIServer).CreatePostVote(ctx, req.(*CreatePostVoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostVotesAPI_UpdatePostVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePostVoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostVotesAPIServer).UpdatePostVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/voter.post_votes.v1.PostVotesAPI/UpdatePostVote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostVotesAPIServer).UpdatePostVote(ctx, req.(*UpdatePostVoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostVotesAPI_DeletePostVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePostVoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostVotesAPIServer).DeletePostVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/voter.post_votes.v1.PostVotesAPI/DeletePostVote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostVotesAPIServer).DeletePostVote(ctx, req.(*DeletePostVoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PostVotesAPI_ServiceDesc is the grpc.ServiceDesc for PostVotesAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PostVotesAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "voter.post_votes.v1.PostVotesAPI",
	HandlerType: (*PostVotesAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListPostVotes",
			Handler:    _PostVotesAPI_ListPostVotes_Handler,
		},
		{
			MethodName: "GetByPidVid",
			Handler:    _PostVotesAPI_GetByPidVid_Handler,
		},
		{
			MethodName: "GetPostVote",
			Handler:    _PostVotesAPI_GetPostVote_Handler,
		},
		{
			MethodName: "ListVidsByPid",
			Handler:    _PostVotesAPI_ListVidsByPid_Handler,
		},
		{
			MethodName: "CreatePostVote",
			Handler:    _PostVotesAPI_CreatePostVote_Handler,
		},
		{
			MethodName: "UpdatePostVote",
			Handler:    _PostVotesAPI_UpdatePostVote_Handler,
		},
		{
			MethodName: "DeletePostVote",
			Handler:    _PostVotesAPI_DeletePostVote_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/voter/v1/voter-post_votes.proto",
}
