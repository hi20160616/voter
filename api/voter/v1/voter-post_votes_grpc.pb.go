// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.3
// source: api/voter/v1/voter-post_votes.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PostVotesAPIClient is the client API for PostVotesAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PostVotesAPIClient interface {
	GetPostVotes(ctx context.Context, in *GetPostVotesRequest, opts ...grpc.CallOption) (*PostVotes, error)
	CreatePostVotes(ctx context.Context, in *CreatePostVotesRequest, opts ...grpc.CallOption) (*PostVote, error)
	UpdatePostVotes(ctx context.Context, in *UpdatePostVotesRequest, opts ...grpc.CallOption) (*PostVote, error)
	DeletePostVotes(ctx context.Context, in *DeletePostVotesRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type postVotesAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewPostVotesAPIClient(cc grpc.ClientConnInterface) PostVotesAPIClient {
	return &postVotesAPIClient{cc}
}

func (c *postVotesAPIClient) GetPostVotes(ctx context.Context, in *GetPostVotesRequest, opts ...grpc.CallOption) (*PostVotes, error) {
	out := new(PostVotes)
	err := c.cc.Invoke(ctx, "/voter.post_votes.v1.PostVotesAPI/GetPostVotes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postVotesAPIClient) CreatePostVotes(ctx context.Context, in *CreatePostVotesRequest, opts ...grpc.CallOption) (*PostVote, error) {
	out := new(PostVote)
	err := c.cc.Invoke(ctx, "/voter.post_votes.v1.PostVotesAPI/CreatePostVotes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postVotesAPIClient) UpdatePostVotes(ctx context.Context, in *UpdatePostVotesRequest, opts ...grpc.CallOption) (*PostVote, error) {
	out := new(PostVote)
	err := c.cc.Invoke(ctx, "/voter.post_votes.v1.PostVotesAPI/UpdatePostVotes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postVotesAPIClient) DeletePostVotes(ctx context.Context, in *DeletePostVotesRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/voter.post_votes.v1.PostVotesAPI/DeletePostVotes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PostVotesAPIServer is the server API for PostVotesAPI service.
// All implementations must embed UnimplementedPostVotesAPIServer
// for forward compatibility
type PostVotesAPIServer interface {
	GetPostVotes(context.Context, *GetPostVotesRequest) (*PostVotes, error)
	CreatePostVotes(context.Context, *CreatePostVotesRequest) (*PostVote, error)
	UpdatePostVotes(context.Context, *UpdatePostVotesRequest) (*PostVote, error)
	DeletePostVotes(context.Context, *DeletePostVotesRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedPostVotesAPIServer()
}

// UnimplementedPostVotesAPIServer must be embedded to have forward compatible implementations.
type UnimplementedPostVotesAPIServer struct {
}

func (UnimplementedPostVotesAPIServer) GetPostVotes(context.Context, *GetPostVotesRequest) (*PostVotes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPostVotes not implemented")
}
func (UnimplementedPostVotesAPIServer) CreatePostVotes(context.Context, *CreatePostVotesRequest) (*PostVote, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePostVotes not implemented")
}
func (UnimplementedPostVotesAPIServer) UpdatePostVotes(context.Context, *UpdatePostVotesRequest) (*PostVote, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePostVotes not implemented")
}
func (UnimplementedPostVotesAPIServer) DeletePostVotes(context.Context, *DeletePostVotesRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePostVotes not implemented")
}
func (UnimplementedPostVotesAPIServer) mustEmbedUnimplementedPostVotesAPIServer() {}

// UnsafePostVotesAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PostVotesAPIServer will
// result in compilation errors.
type UnsafePostVotesAPIServer interface {
	mustEmbedUnimplementedPostVotesAPIServer()
}

func RegisterPostVotesAPIServer(s grpc.ServiceRegistrar, srv PostVotesAPIServer) {
	s.RegisterService(&PostVotesAPI_ServiceDesc, srv)
}

func _PostVotesAPI_GetPostVotes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPostVotesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostVotesAPIServer).GetPostVotes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/voter.post_votes.v1.PostVotesAPI/GetPostVotes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostVotesAPIServer).GetPostVotes(ctx, req.(*GetPostVotesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostVotesAPI_CreatePostVotes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePostVotesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostVotesAPIServer).CreatePostVotes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/voter.post_votes.v1.PostVotesAPI/CreatePostVotes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostVotesAPIServer).CreatePostVotes(ctx, req.(*CreatePostVotesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostVotesAPI_UpdatePostVotes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePostVotesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostVotesAPIServer).UpdatePostVotes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/voter.post_votes.v1.PostVotesAPI/UpdatePostVotes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostVotesAPIServer).UpdatePostVotes(ctx, req.(*UpdatePostVotesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostVotesAPI_DeletePostVotes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePostVotesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostVotesAPIServer).DeletePostVotes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/voter.post_votes.v1.PostVotesAPI/DeletePostVotes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostVotesAPIServer).DeletePostVotes(ctx, req.(*DeletePostVotesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PostVotesAPI_ServiceDesc is the grpc.ServiceDesc for PostVotesAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PostVotesAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "voter.post_votes.v1.PostVotesAPI",
	HandlerType: (*PostVotesAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPostVotes",
			Handler:    _PostVotesAPI_GetPostVotes_Handler,
		},
		{
			MethodName: "CreatePostVotes",
			Handler:    _PostVotesAPI_CreatePostVotes_Handler,
		},
		{
			MethodName: "UpdatePostVotes",
			Handler:    _PostVotesAPI_UpdatePostVotes_Handler,
		},
		{
			MethodName: "DeletePostVotes",
			Handler:    _PostVotesAPI_DeletePostVotes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/voter/v1/voter-post_votes.proto",
}
